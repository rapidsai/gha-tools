#!/bin/bash
# Common functionality for downloading artifacts from GitHub PR builds
#
# Arguments:
#   1) repo name
#   2) PR number
#   3) "cpp" or "python", to get the artifact for the C++ or Python build, respectively
#   4) "wheel" or "conda", to get the wheel or conda package artifact, respectively
#   5) full commit hash
set -euo pipefail

repo="$1"
pr="$2"
package_type="${3}"
package_format="${4}"
commit="${5:-}"

if [[ "${package_format}" = "wheel" && -z "${RAPIDS_PY_WHEEL_NAME:+placeholder}" ]]; then
    echo "The RAPIDS_PY_WHEEL_NAME variable must be set when fetching a wheel artifact"
    exit 1
fi

source rapids-prompt-local-github-auth

# If commit is not provided, get the latest commit on the PR
if [[ -z "${commit}" ]]; then
    commit=$(rapids-retry --quiet gh pr view "${pr}" --repo rapidsai/"${repo}" --json headRefOid --jq '.headRefOid')
fi

# Set up environment variables needed for GitHub artifact download
RAPIDS_REPOSITORY="rapidsai/${repo}"
RAPIDS_SHA="${commit}"
RAPIDS_REF_NAME="pull-request/${pr}"

# Generate the artifact name
pkg_name=$(RAPIDS_NO_PKG_EXTENSION=true rapids-package-name "${package_format}_${package_type}")
github_run_id=$(rapids-retry --quiet gh run list --repo "${RAPIDS_REPOSITORY}" --branch "${RAPIDS_REF_NAME}" --commit "${RAPIDS_SHA}" --json databaseId --jq '.[0] | .databaseId')
unzip_dest="${RAPIDS_UNZIP_DIR:-$(mktemp -d)}"

rapids-echo-stderr "Downloading and decompressing ${pkg_name} from Run ID ${github_run_id} into ${unzip_dest}"
rapids-retry gh run download "${github_run_id}" --repo "${RAPIDS_REPOSITORY}" --name "${pkg_name}" --dir "${unzip_dest}"

echo -n "${unzip_dest}"
