#!/bin/bash
# Common functionality for downloading artifacts from GitHub PR builds
#
# Arguments:
#   1) repo name
#   2) PR number
#   3) "cpp" or "python", to get the artifact for the C++ or Python build, respectively
#   4) "wheel" or "conda", to get the wheel or conda package artifact, respectively
#   5) [optional] full commit hash, to get the artifact for a specific commit
set -euo pipefail

repo="rapidsai/${1}"
pr="${2}"
package_type="${3}"
package_format="${4}"
commit="${5:-}"

if [[ "${package_format}" = "wheel" && -z "${RAPIDS_PY_WHEEL_NAME:+placeholder}" ]]; then
    echo "The RAPIDS_PY_WHEEL_NAME variable must be set when fetching a wheel artifact"
    exit 1
fi

source rapids-prompt-local-github-auth

# If commit is not provided, get the latest commit on the PR
if [[ -z "${commit}" ]]; then
    commit=$(rapids-retry --quiet gh pr view "${pr}" --repo "${repo}" --json headRefOid --jq '.headRefOid')
fi

# Generate the artifact name
pkg_name=$(
    RAPIDS_NO_PKG_EXTENSION=true                               \
    RAPIDS_REPOSITORY="${repo}"                                \
        rapids-package-name "${package_format}_${package_type}"
)

# get run ID
# NOTE: cannot reuse rapids-github-run-id here, because the environment variable
#       GITHUB_RUN_ID will refer to the run this is being called from, not
#       the run that generated the artifact we're looking for.
#
#       For example, if this is called on a 'cudf' PR to download 'rmm' artifacts,
#       here we want a run ID from an 'rmm' CI run, not the current 'cudf' one.
github_run_id=$(
    rapids-retry --quiet gh run list  \
        --repo "${repo}"              \
        --branch "pull-request/${pr}" \
        --commit "${commit}"          \
        --json 'createdAt,databaseId' \
        --jq 'sort_by(.createdAt) | reverse | .[0] | .databaseId'
)
unzip_dest="${RAPIDS_UNZIP_DIR:-$(mktemp -d)}"

rapids-echo-stderr "Downloading and decompressing ${pkg_name} from Run ID ${github_run_id} into ${unzip_dest}"
rapids-retry gh run download \
    "${github_run_id}"       \
    --repo "${repo}"         \
    --name "${pkg_name}"     \
    --dir "${unzip_dest}"

echo -n "${unzip_dest}"
