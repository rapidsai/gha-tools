#!/bin/bash
#
# rapids-conda-retry
#
# wrapper for conda that retries the command after a CondaHTTPError,
# ChecksumMismatchError, or JSONDecodeError (ideally, any conda error that
# is normally resolved by retrying)
#
# This must be set in order for the script to recognize failing exit codes when
# output is piped to tee
#
# Example usage:
# $ rapids-conda-retry install cudatoolkit=11.0 rapids=0.16
#
# Configurable options are set using the following env vars:
#
# RAPIDS_CONDA_EXE             - override the conda executable
#                                Default is "conda"
#
# RAPIDS_CONDA_RETRY_MAX       - set to a positive integer to set the max number of retry
#                                attempts (attempts after the initial try).
#                                Default is 3 retries
#
# RAPIDS_CONDA_RETRY_SLEEP     - set to a positive integer to set the duration, in
#                                seconds, to wait between retries.
#                                Default is a 10 second sleep
#
set -o pipefail
export RAPIDS_SCRIPT_NAME="rapids-conda-retry"

condaretry_help="
rapids-conda-retry options:

   --condaretry_max_retries=n      Retry the conda command at most n times (default is 3)
   --condaretry_sleep_interval=n   Sleep n seconds between retries (default is 5)

ALSO rapids-conda-retry options can be set using the following env vars:

    RAPIDS_CONDA_RETRY_MAX       - set to a positive integer to set the max number of retry
                                   attempts (attempts after the initial try).
                                   Default is 3 retries

    RAPIDS_CONDA_RETRY_SLEEP     - set to a positive integer to set the duration, in
                                   seconds, to wait between retries.
                                   Default is a 10 second sleep
==========
"
max_retries=${RAPIDS_CONDA_RETRY_MAX:=3}
sleep_interval=${RAPIDS_CONDA_RETRY_SLEEP:=10}
exitcode=0
needToRetry=0
retries=0
args=""

# Temporarily set this to something else (eg. a script called "testConda" that
# prints "CondaHTTPError:" and exits with 1) for testing this script.
#condaCmd=./testConda
condaCmd=${RAPIDS_CONDA_EXE:=conda}

# Function to run conda and check output for specific retryable errors
# input variables:
#    condaCmd: the command used for running conda, which accepts the args
#              passed to this script
#    outfile: file to tee output to for checking, likely a temp file
# output variables:
#    exitcode: the exit code from running ${condaCmd} ${args}
#    needToRetry: 1 if the command should be retried, 0 if it should not be
function runConda {
    # shellcheck disable=SC2086
    ${condaCmd} ${args} 2>&1| tee "${outfile}"
    exitcode=$?
    needToRetry=0
    needToClean=0
    retryingMsg=""

    if (( exitcode != 0 )); then
        # Show exit code
        rapids-echo-stderr "conda returned exit code: ${exitcode}"

        if grep -q ChecksumMismatchError: "${outfile}"; then
            retryingMsg="Retrying, found 'ChecksumMismatchError:' in output..."
            needToRetry=1
        elif grep -q ChunkedEncodingError: "${outfile}"; then
            retryingMsg="Retrying, found 'ChunkedEncodingError:' in output..."
            needToRetry=1
        elif grep -q CondaHTTPError: "${outfile}"; then
            retryingMsg="Retrying, found 'CondaHTTPError:' in output..."
            needToRetry=1
        elif grep -q CondaMultiError: "${outfile}"; then
            retryingMsg="Retrying after cleaning tarball cache, found 'CondaMultiError:' in output..."
            needToRetry=1
            needToClean=1
        elif grep -q "Connection broken:" "${outfile}"; then
            retryingMsg="Retrying, found 'Connection broken:' in output..."
            needToRetry=1
        elif grep -q ConnectionError: "${outfile}"; then
            retryingMsg="Retrying, found 'ConnectionError:' in output..."
            needToRetry=1
        elif grep -q DependencyNeedsBuildingError: "${outfile}"; then
            retryingMsg="Retrying, found 'DependencyNeedsBuildingError:' in output..."
            needToRetry=1
        elif grep -q EOFError: "${outfile}"; then
            retryingMsg="Retrying, found 'EOFError:' in output..."
            needToRetry=1
        elif grep -q JSONDecodeError: "${outfile}"; then
            retryingMsg="Retrying, found 'JSONDecodeError:' in output..."
            needToRetry=1
        elif grep -q "Multi-download failed" "${outfile}"; then
            retryingMsg="Retrying, found 'Multi-download failed' in output..."
            needToRetry=1
        elif grep -q "Timeout was reached" "${outfile}"; then
            retryingMsg="Retrying, found 'Timeout was reached' in output..."
            needToRetry=1
        elif [[ $exitcode -eq 139 ]]; then
            retryingMsg="Retrying, command resulted in a segfault. This may be an intermittent failure..."
            needToRetry=1
            needToClean=1
        else
            rapids-echo-stderr "Exiting, no retryable ${RAPIDS_CONDA_EXE} errors detected: \
'ChecksumMismatchError:', \
'ChunkedEncodingError:', \
'CondaHTTPError:', \
'CondaMultiError:', \
'Connection broken:', \
'ConnectionError:', \
'DependencyNeedsBuildingError:', \
'EOFError:', \
'JSONDecodeError:', \
'Multi-download failed', \
'Timeout was reached', \
segfault exit code 139"
        fi

        if (( needToRetry == 1 )) && \
           (( retries >= max_retries )); then
            # Catch instance where we run out of retries
            rapids-echo-stderr "Exiting, reached max retries..."
        else
            # Give reason for retry
            rapids-echo-stderr "${retryingMsg}"
            if (( needToClean == 1 )); then
                rapids-echo-stderr "Cleaning tarball cache before retrying..."
                ${condaCmd} clean --tarballs -y
            fi
        fi
fi
}

# Process and remove args recognized only by this script, save others for conda
# Process help separately
for arg in "$@"; do
   opt=${arg%%=*}
   val=${arg##*=}
   if [[ ${opt} == "--help" ]] || [[ ${opt} == "-h" ]]; then
      echo "${condaretry_help}"
      ${condaCmd} --help
      exit $?
   elif [[ ${opt} == "--condaretry_max_retries" ]]; then
      max_retries=${val}
   elif [[ ${opt} == "--condaretry_sleep_interval" ]]; then
      sleep_interval=${val}
   else
      args="${args} ${arg}"
   fi
done

# Run command
outfile=$(mktemp)
# shellcheck disable=SC2086
runConda ${args}

# Retry loop, only if needed
while (( needToRetry == 1 )) && \
      (( retries < max_retries )); do

   retries=$(( retries + 1 ))
   rapids-echo-stderr "Waiting, retry ${retries} of ${max_retries} -> sleeping for ${sleep_interval} seconds..."
   sleep "${sleep_interval}"
   rapids-echo-stderr "Starting, retry ${retries} of ${max_retries} -> sleep done..."

   # shellcheck disable=SC2086
   runConda ${args}
done

rm -f "${outfile}"
exit ${exitcode}
